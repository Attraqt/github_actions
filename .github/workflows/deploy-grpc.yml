name: Deploy gRPC service
on:
  workflow_call:
    inputs:
      module_name:
        required: true
        type: string
      service_name:
        required: true
        type: string
      java_version:
        type: string
        default: 11
      legacy_docker_build_push:
        type: boolean
        default: false
    secrets:
      GCP_PUBLISHER_SERVICE_ACCOUNT_KEY:
        required: true
      GH_PACKAGES_READ_ACCESS_TOKEN:
        required: true
      GH_DEPLOYMENT_CREATION_ACCESS_TOKEN:
        required: true
      ARTIFACTORY_USER:
        required: false
      ARTIFACTORY_PASSWORD:
        required: false

env:
  final_name: ${{ inputs.module_name }}-${{ inputs.service_name }}
  artifactory_password: ${{ secrets.ARTIFACTORY_PASSWORD }}

jobs:
  publish_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Fetch tag history
        run: git fetch --prune --unshallow
        if: github.ref == 'refs/heads/master'

      - name: Set up cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/**') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.java_version }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_PUBLISHER_SERVICE_ACCOUNT_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Install Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Configure docker authentication
        run: gcloud auth configure-docker

      - name: Get docker tag and deployment env
        id: get_context
        run: |
          VERSION=$([ '${{ github.ref }}' == 'refs/heads/master' ] && git rev-parse --short HEAD || ./gradlew --quiet --console=plain -Prelease.quiet -Pgpr.read.user=${{ inputs.module_name }} -Pgpr.read.key=${{ secrets.GH_PACKAGES_READ_ACCESS_TOKEN }} ${{ env.final_name }}:currentVersion | tail -n1 )
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image_name=eu.gcr.io/attraqt-xo/${{ env.final_name }}:$VERSION" >> $GITHUB_OUTPUT
          echo "env=$([ '${{ github.ref }}' == 'refs/heads/master' ] && echo 'dev' || echo 'prod')" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: ./gradlew -Pgpr.read.user=${{ inputs.module_name }} -Pgpr.read.key=${{ secrets.GH_PACKAGES_READ_ACCESS_TOKEN }} ${{ env.final_name }}:bootBuildImage --imageName=${{ steps.get_context.outputs.image_name }}
        if: ${{ env.legacy_docker_build_push != 'true' && env.artifactory_password == null }}

      - name: Build Docker image
        run: > 
          ./gradlew 
          -Pgpr.read.user=${{ inputs.module_name }} 
          -Pgpr.read.key=${{ secrets.GH_PACKAGES_READ_ACCESS_TOKEN }}
          -Partifactory.user=${{ secrets.ARTIFACTORY_USER }}
          -Partifactory.password=${{ secrets.ARTIFACTORY_PASSWORD }}
          ${{ env.final_name }}:bootBuildImage 
          --imageName=${{ steps.get_context.outputs.image_name }}
        if: ${{ env.legacy_docker_build_push != 'true' && env.artifactory_password != null }}

      - name: Push Docker image
        run: docker push ${{ steps.get_context.outputs.image_name }}
        if: ${{ env.legacy_docker_build_push != 'true' }}

      - name: Build & Push Docker image (using gradle plugin)
        run: |
          ./gradlew \
            -Pgpr.read.user=${{ inputs.module_name }}  \
            -Pgpr.read.key=${{ secrets.GH_PACKAGES_READ_ACCESS_TOKEN }} \
            -Partifactory.user=${{ secrets.ARTIFACTORY_USER }} \
            -Partifactory.password=${{ secrets.ARTIFACTORY_PASSWORD }} \
            -Pdocker.tag=${{ steps.tag_env.outputs.version }} \
            :${{ env.final_name }}:dockerPushImage --console=plain
        if: ${{ env.legacy_docker_build_push == 'true' }}

      - name: Deploy
        uses: Attraqt/github_actions/.github/actions/deploy@main
        with:
          repo: xo-terragrunt-${{ steps.get_context.outputs.env }}
          ref: master
          environment: ${{ steps.get_context.outputs.env }}
          token: ${{ secrets.GH_DEPLOYMENT_CREATION_ACCESS_TOKEN }}
          task: ${{ env.final_name }}:${{ steps.get_context.outputs.version }}
          required_contexts: <<EMPTY>>
