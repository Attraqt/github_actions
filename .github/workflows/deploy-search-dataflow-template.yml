# This ci upload dataflow templates in both dev and prod environment
# also it deploy all main functions (for Streaming and Batch)
# thus your main class should be called Main if alone, and Batch/Streaming if multiple
# (same as `deploy-dataflow-template.yml` with a 3 environment model ie. dev / staging / prod)
name: Deploy Search Dataflow Template
on:
  workflow_call:
    inputs:
      module_name:
        required: true
        type: string
      job_name:
        required: true
        type: string
      java_version:
        type: string
        default: 17
    secrets:
      gcp_publisher_service_account_key_prod:
        required: true
      gcp_publisher_service_account_key_dev:
        required: true
      gh_packages_read_access_token:
        required: true
      gh_deployment_creation_access_token:
        required: true
      extra_gradle_parameters:
        required: false

env:
  job_location: ${{ inputs.module_name }}-jobs
  global_job_name: ${{ inputs.module_name }}-jobs-${{ inputs.job_name }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up cache
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/**') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: ${{ inputs.java_version }}

      - id: get_version_env
        name: Get job version and deployment env
        run: |
          ENV=$(if [ '${{ github.ref }}' == 'refs/heads/develop' ]; then echo 'dev'; elif [ '${{ github.ref }}' == 'refs/heads/master' ]; then echo 'staging'; else echo 'prod'; fi)
          VERSION=$([[ '${{ github.ref }}' == refs/heads/* ]] && git rev-parse --short HEAD || ./gradlew --quiet --console=plain -Prelease.quiet -Pgpr.read.user=${{ inputs.module_name }} -Pgpr.read.key=${{ secrets.GH_PACKAGES_READ_ACCESS_TOKEN }} ${{ env.final_name }}:currentVersion | tail -n1 )
          GOOGLE_PROJECT=$([ '${{ github.ref }}' == 'refs/heads/develop' ] && echo 'attraqt-xo-dev' || echo 'attraqt-xo')
          TERRAGRUNT_PROJECT=$([ '${{ github.ref }}' == 'refs/heads/develop' ] && echo 'xo-terragrunt-dev' || echo 'xo-terragrunt-prod')
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "bucket_prefix=$(if [ $ENV == 'dev' ]; then echo 'xo-dev'; else echo 'xo'; fi)" >> $GITHUB_OUTPUT
          echo "google_credentials=$([ $GOOGLE_PROJECT == 'prod' ] && echo ${{ secrets.GCP_PUBLISHER_SERVICE_ACCOUNT_KEY_PROD }} || echo ${{ secrets.GCP_PUBLISHER_SERVICE_ACCOUNT_KEY_DEV }})" >> $GITHUB_OUTPUT
          echo "google_project=$GOOGLE_PROJECT" >> $GITHUB_OUTPUT
          echo "terragrunt_project=$TERRAGRUNT_PROJECT" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ steps.get_version_env.outputs.google_credentials }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Publish Dataflow Template
        run: |
          GCS_PREFIX="gs://${{ steps.get_version_env.outputs.bucket_prefix }}-dataflow/jobs/${{ env.global_job_name }}/${{ steps.get_version_env.outputs.version }}"

          for MAIN_CLASS_FILE in $(grep -lrE "fun main\b" --include="*.kt" ${{ env.job_location }}/${{ env.global_job_name }}/src/main); do
            MAIN_CLASS=$(basename $MAIN_CLASS_FILE)
            MAIN_CLASS=${MAIN_CLASS%.*}

            ARGS="--runner=DataflowRunner"
            ARGS+=" --project=${{ steps.get_version_env.outputs.google_project }}"
            ARGS+=" --region=europe-west1"
            ARGS+=" --stagingLocation=$GCS_PREFIX/staging"
            ARGS+=" --tempLocation=$GCS_PREFIX/tmp"
            ARGS+=" --templateLocation=$GCS_PREFIX/templates/${MAIN_CLASS,,}"

            echo "ARGS: $ARGS"

            ./gradlew :${{ env.job_location }}:${{ env.global_job_name }}:run -Pmain=$MAIN_CLASS -Pgpr.read.user=${{ inputs.module_name }} -Pgpr.read.key=${{ secrets.GH_PACKAGES_READ_ACCESS_TOKEN }} ${{ secrets.EXTRA_GRADLE_PARAMETERS }} --args="$ARGS"
          done

      - name: Deploy
        id: deploy
        uses: Attraqt/github_actions/.github/actions/deploy@main
        with:
          repo: ${{ steps.get_version_env.outputs.terragrunt_project }}
          ref: master
          environment: ${{ steps.get_version_env.outputs.env }}
          token: ${{ secrets.GH_DEPLOYMENT_CREATION_ACCESS_TOKEN }}
          task: ${{ env.global_job_name }}:${{ steps.get_version_env.outputs.version }}
          required_contexts: <<EMPTY>>
